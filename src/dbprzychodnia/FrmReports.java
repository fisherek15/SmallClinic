/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dbprzychodnia;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.toedter.calendar.JDateChooser;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Adrian
 */
public class FrmReports extends javax.swing.JFrame {    
    
    Connection cn = new Connection();    
    
    DefaultTableModel lista = new DefaultTableModel();

    /**
     * Creates new form FrmReports
     */
    public FrmReports() {
        initComponents();
        fillCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        btnDrukujRaport = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        cBoxChoroby = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        txtDateSince = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        txtDateTill = new com.toedter.calendar.JDateChooser();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("GENEROWANIE RAPORTÓW");

        btnDrukujRaport.setText("Drukuj raport");
        btnDrukujRaport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrukujRaportActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Spis lekarstw zapisywanych przez lekarzy");
        jCheckBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox1ItemStateChanged(evt);
            }
        });

        jCheckBox2.setText("Spis lekarstw leczących daną jednostkę chorobową");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jCheckBox3.setText("Ilość wizyt obsługiwanych przez każdego lekarza");

        cBoxChoroby.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wszystkie choroby" }));
        cBoxChoroby.setToolTipText("");
        cBoxChoroby.setEnabled(false);

        jLabel3.setText("od");

        txtDateSince.setEnabled(false);

        jLabel4.setText("do");

        txtDateTill.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDateSince, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDateTill, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDrukujRaport, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cBoxChoroby, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDateSince, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(txtDateTill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cBoxChoroby, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(btnDrukujRaport)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void fillCombo() {
        
        cn.connect();
        String sql = "Select * from choroby";
        cn.executeQuerying(sql);
        try {
                while (cn.rs.next()) {                
                    cBoxChoroby.addItem(cn.rs.getString("nazwa_choroby"));
                }
        } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Błąd podczas przeglądania bazy danych: " + ex);
        }
    }
    
    public String getDateValue(JDateChooser date) {
        
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        return dateFormat.format(date.getDate());
    }
    
    public void report1() {
        
        com.itextpdf.text.Font f = null;
        com.itextpdf.text.Font f1 = null;
        try {
            BaseFont bf = BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, BaseFont.EMBEDDED);
            f = new com.itextpdf.text.Font(bf, 16, com.itextpdf.text.Font.NORMAL);
            f1 = new com.itextpdf.text.Font(bf, 18, java.awt.Font.BOLD);
        } catch (DocumentException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (txtDateSince.getDate() != null && txtDateTill.getDate() != null) {
            
            String path = "D:/INFORMATICS/Projects Java/DBPrzychodnia2/raport_zapisywane_lekarstwa.pdf";
                String RESULT = "raport_zapisywane_lekarstwa.pdf";
                Document document = new Document();

            try { 
                PdfPTable table = new PdfPTable(2);
                
                table.addCell(new Paragraph("Nazwa lekarstwa",f1));
                table.addCell(new Paragraph("Ilość",f1));                
                
                PdfWriter.getInstance(document, new FileOutputStream(RESULT));
                document.open();                
                
                String name;
                String quantity;
                
                lista.setColumnCount(0);
                lista.setRowCount(0);
                lista.addColumn("Nazwa");
                lista.addColumn("Ilosc");
                
                cn.connect();
                
                String sql = "SELECT COUNT (lekarstwa.id_lekarstwa) "
                        + "AS ilosc, lekarstwa.nazwa_lekarstwa  "
                        + "FROM przepisane_lekarstwa, lekarstwa, wizyty "
                        + "WHERE wizyty.id_wizyty=przepisane_lekarstwa.id_wizyty "
                        + "AND lekarstwa.id_lekarstwa = przepisane_lekarstwa.id_lekarstwa "
                        + "AND data_wizyty >= '" + getDateValue(txtDateSince) + "' "
                        + "AND data_wizyty <= '" + getDateValue(txtDateTill) + "' "
                        + "GROUP BY nazwa_lekarstwa";
                
                cn.executeQuerying(sql);
                
                try {
                    while (cn.rs.next()) {
                        name = cn.rs.getString("nazwa_lekarstwa");
                        quantity = cn.rs.getString("ilosc");
                        
                        table.addCell(new Paragraph(name, f));
                        table.addCell(new Phrase(quantity, f));
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Błąd podczas przeglądania bazy danych: " + ex);
                }
                
                document.add(table);
                document.close();
                
                print(path);
                
            } catch (DocumentException ex) {
                JOptionPane.showMessageDialog(null, "Błąd pliku. " + ex);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Plik nie został odnaleziony. Sprawdź ścieżkę pliku. " + ex);
            }            
        } else {
            JOptionPane.showMessageDialog(null, "Uzupełnij pola daty.");
        }
    }
    
    public void report2() {
        
        com.itextpdf.text.Font f = null;
        com.itextpdf.text.Font f1 = null;
        com.itextpdf.text.Font f2 = null;
        try {
            BaseFont bf = BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, BaseFont.EMBEDDED);
            f = new com.itextpdf.text.Font(bf, 13, com.itextpdf.text.Font.NORMAL);
            f1 = new com.itextpdf.text.Font(bf, 18, java.awt.Font.BOLD, BaseColor.RED);
            f2 = new com.itextpdf.text.Font(bf, 14, java.awt.Font.BOLD, BaseColor.BLACK);
        } catch (DocumentException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String path = "D:/INFORMATICS/Projects Java/DBPrzychodnia2/raport_lekarstwa_na.pdf";
        String RESULT = "raport_lekarstwa_na.pdf";
        Document document = new Document();
        
        try{
            PdfPTable table = new PdfPTable(4);
            PdfPCell cell;
            
            PdfWriter.getInstance(document, new FileOutputStream(RESULT));
            document.open();

            String disease;
            String name;
            String dose;
            String dosage;
            String period;

            lista.setColumnCount(0);
            lista.setRowCount(0);
            lista.addColumn("Nazwa");
            lista.addColumn("Dawka");
            lista.addColumn("Dawkowanie");
            lista.addColumn("Okres");

            cn.connect();

            String choice = cBoxChoroby.getSelectedItem().toString();
            String sql;

            if("Wszystkie choroby".equals(choice)) {

                sql = "SELECT lekarstwa.nazwa_lekarstwa, choroby.nazwa_choroby, leczenie_choroby.typowa_dawka, "
                    + "leczenie_choroby.typowe_dawkowanie, leczenie_choroby.typowy_okres "
                    + "FROM choroby, lekarstwa, leczenie_choroby "
                    + "WHERE Lekarstwa.id_lekarstwa=leczenie_choroby.id_lekarstwa "
                    + "AND choroby.id_choroby=leczenie_choroby.id_choroby "
                    + "ORDER BY nazwa_choroby";
            } else {
                
                sql = "SELECT lekarstwa.nazwa_lekarstwa, choroby.nazwa_choroby, leczenie_choroby.typowa_dawka, "
                    + "leczenie_choroby.typowe_dawkowanie, leczenie_choroby.typowy_okres "
                    + "FROM choroby, lekarstwa, leczenie_choroby "
                    + "WHERE Lekarstwa.id_lekarstwa=leczenie_choroby.id_lekarstwa "
                    + "AND choroby.id_choroby=leczenie_choroby.id_choroby "
                    + "AND choroby.nazwa_choroby='"+choice+"' "
                    + "ORDER BY nazwa_lekarstwa";
            }

            cn.executeQuerying(sql);

            String other = "";

            try {
                while (cn.rs.next()) {               

                    disease = cn.rs.getString("nazwa_choroby");
                    name = cn.rs.getString("nazwa_lekarstwa");
                    dose = cn.rs.getString("typowa_dawka");    
                    dosage = cn.rs.getString("typowe_dawkowanie");
                    period = cn.rs.getString("typowy_okres");

                    if(!other.equals(disease)) {   

                        cell = new PdfPCell(new Phrase(disease, f1));
                        cell.setColspan(4);
                        table.addCell(cell);
                        table.addCell(new Phrase("Nazwa lekarstwa", f2));
                        table.addCell(new Phrase("Dawka", f2));
                        table.addCell(new Phrase("Typowe dawkowanie", f2));
                        table.addCell(new Phrase("Okres stosowania", f2));
                        other = disease;
                    }

                    table.addCell(new Paragraph(name, f));
                    table.addCell(new Phrase(dose, f));
                    table.addCell(new Paragraph(dosage, f));
                    table.addCell(new Phrase(period, f));              
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Błąd podczas przeglądania bazy danych: " + ex);
            }

            document.add(table);
            document.close();

            print(path);
        
        }
        catch(FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Plik nie został odnaleziony. Sprawdź ścieżkę pliku. " + ex);
        }
        catch(DocumentException ex) {
            JOptionPane.showMessageDialog(null, "Błąd pliku. " + ex);
        }
    }
    
    public void report3() {
        
        com.itextpdf.text.Font f = null;
        com.itextpdf.text.Font f1 = null;
        try {
            BaseFont bf = BaseFont.createFont(BaseFont.TIMES_ROMAN, BaseFont.CP1250, BaseFont.EMBEDDED);
            f = new com.itextpdf.text.Font(bf, 16, com.itextpdf.text.Font.NORMAL);
            f1 = new com.itextpdf.text.Font(bf, 18, java.awt.Font.BOLD, BaseColor.BLACK);
        } catch (DocumentException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmVisits.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        String path = "D:/INFORMATICS/Projects Java/DBPrzychodnia2/raport_ilosc_wizyt.pdf";        
        String RESULT = "raport_ilosc_wizyt.pdf";
        Document document = new Document();
        
        try{
            PdfPTable table = new PdfPTable(4);       

            table.addCell(new Paragraph("ID lekarza",f1));
            table.addCell(new Paragraph("Imię",f1));
            table.addCell(new Paragraph("Nazwisko",f1));
            table.addCell(new Paragraph("Ilość wizyt",f1));

            PdfWriter.getInstance(document, new FileOutputStream(RESULT));
            document.open();

            String id;
            String name;
            String lastName;
            String quantity;

            lista.setColumnCount(0);
            lista.setRowCount(0);
            lista.addColumn("id");
            lista.addColumn("imie");
            lista.addColumn("nazwisko");
            lista.addColumn("ilosc");

            cn.connect();

            String sql = "SELECT COUNT (id_wizyty) AS ilosc, lekarze.imie, lekarze.nazwisko, lekarze.id_lekarza "
                    + "FROM lekarze, wizyty "
                    + "WHERE wizyty.id_lekarza=lekarze.id_lekarza "
                    + "GROUP BY Lekarze.id_lekarza, imie, nazwisko";

            cn.executeQuerying(sql);

            try {
                while (cn.rs.next()) {                
                    id = cn.rs.getString("id_lekarza");
                    name = cn.rs.getString("imie");
                    lastName = cn.rs.getString("nazwisko");
                    quantity = cn.rs.getString("ilosc");      

                    table.addCell(new Paragraph(id, f));
                    table.addCell(new Paragraph(name, f));
                    table.addCell(new Paragraph(lastName, f));
                    table.addCell(new Paragraph(quantity, f));

                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Błąd podczas przeglądania bazy danych: " + ex);
            }

            document.add(table);
            document.close();

            print(path);        
        }
        catch(FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "Plik nie został odnaleziony. Sprawdź ścieżkę pliku. " + ex);
        }
        catch(DocumentException ex) {
            JOptionPane.showMessageDialog(null, "Błąd pliku. " + ex);
        }
    }
    
    public void print(String path) {
        
        if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(path);
                    Desktop.getDesktop().open(myFile);

                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(null, "Błąd podczas uruchamiania pliku. Sprawdź ścieżkę pliku." + ex);
                }
        }
    }
    
    
    private void btnDrukujRaportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrukujRaportActionPerformed
        
        if(jCheckBox1.isSelected()) {
                report1();
        }
        
        if(jCheckBox2.isSelected()) {
                report2();           
        }
        
        if(jCheckBox3.isSelected()) {
                report3();
        }
    }//GEN-LAST:event_btnDrukujRaportActionPerformed

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        
        if(cBoxChoroby.isEnabled()) {
            cBoxChoroby.setEnabled(false);
        } else {
            cBoxChoroby.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jCheckBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox1ItemStateChanged
        
        if(txtDateSince.isEnabled() || txtDateTill.isEnabled()) {
            txtDateSince.setEnabled(false);
            txtDateTill.setEnabled(false);
        } else {
            txtDateSince.setEnabled(true);
            txtDateTill.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox1ItemStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        this.setTitle("Raport");
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmReports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDrukujRaport;
    private javax.swing.JComboBox cBoxChoroby;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JDateChooser txtDateSince;
    private com.toedter.calendar.JDateChooser txtDateTill;
    // End of variables declaration//GEN-END:variables
}
